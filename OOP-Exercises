//Create an espresso machine constructor that makes machines with 4 properties and 3 methods
// let hourlyRate = 250;
// let hours = 160;
// let taxRate = 0.35;
// function calculateProfit(rate, numOfHours, taxes) {
//   return rate * numOfHours * (1 - taxes);
// }
// function holdForTaxes(profitMade) {
//   return hourlyRate * hours - profitMade;
// }
// let profit = calculateProfit(hourlyRate, hours, taxRate);
// let taxesHeld = holdForTaxes(profit);
// console.log(profit);
// console.log(taxesHeld);

// const seriousBusinessMan = {
//   hourlyRate: 250,
//   hours: 160,
//   taxRate: 0.25,
//   calculateProfit() {
//     return this.hourlyRate * this.hours * (1 - this.taxRate);
//   },
//   calculateTaxesHeld() {
//     return this.hourlyRate * this.hours - this.calculateProfit();
//   },
// };

// let profit = seriousBusinessMan.calculateProfit();
// console.log(profit);
// let taxesHeld = seriousBusinessMan.calculateTaxesHeld();
// console.log(taxesHeld);

// function AgencyContractor(hourlyRate, hours, taxRate) {
//   this.hours = hours;
//   this.taxRate = taxRate;
//   let rate = hourlyRate;
//   this.calculateProfit = function () {
//     return rate * this.hours * (1 - this.taxRate);
//   };
//   this.invoiceClient = function () {
//     return `Your invoice total is ${rate * this.hours}.`;
//   };
// }

// let efm = new AgencyContractor(100, 10, 0.35);

// // console.log(efm.calculateProfit());

// // console.log(efm.invoiceClient());

// // console.log(efm.hourlyRate);

// console.log(
//   `I, Eugen, would be making $${efm.calculateProfit()} in total for this project.`
// );

// const aurora = {
//   name: "Aurora",
//   health: 150,
//   strength: 25,
//   xp: 0,
//   describe() {
//     return `${this.name} has ${this.health} health points, ${this.strength}
//     as strength and ${this.xp} XP points.`;
//   },
// };

// aurora.health -= 20;
// aurora.strength += 10;
// aurora.xp += 15;

// console.log(aurora.describe());

// class Character {
//   constructor(name, health, strength, inventory) {
//     this.name = name;
//     this.health = health;
//     this.strength = strength;
//     this.xp = 0;
//     this.inventory = {
//       gold: 10,
//       keys: 1,
//     };
//   }
//   attack(target) {
//     if (this.health > 0) {
//       const damage = this.strength;
//       console.log(`${this.name} attacks ${target.name} and causes ${damage}
//       damage points`);
//       target.health -= damage;
//       if (target.health > 0) {
//         console.log(`${target.name} has ${target.health} health points left`);
//       } else {
//         target.health = 0;
//         const bonusXP = 10;
//         const gold = this.inventory.gold;
//         const keys = this.inventory.keys;

//         console.log(`${this.name} eliminated ${target.name} and wins ${bonusXP}
//         experience points, ${this.inventory.gold} gold and ${this.inventory.keys} key(s)`);
//         this.xp += bonusXP;
//         this.inventory.gold += gold;
//         this.inventory.keys += keys;
//       }
//     } else {
//       console.log(`${this.name} can't attack (they've been eliminated)`);
//     }
//   }
//   describe() {
//     return `${this.name} has ${this.health} health points, ${this.strength}
//     as strength, ${this.xp} XP points, ${this.inventory.gold} gold and
//     ${this.inventory.keys} key(s).`;
//   }
// }

// const aurora = new Character("Aurora", 150, 25);
// console.log(aurora.inventory.gold);
// const glacius = new Character("Glacius", 130, 30);

// console.log("Welcome to the adventure! Here are our heroes:");
// console.log(aurora.describe());
// console.log(glacius.describe());

// const monster = new Character("Spike", 40, 20);
// console.log("A wild monster has appeared: it's named " + monster.name);

// monster.attack(aurora);
// monster.attack(glacius);
// aurora.attack(monster);
// glacius.attack(monster);

// console.log(aurora.describe());
// console.log(glacius.describe());

// aurora.health -= 20;
// aurora.strength += 10;
// aurora.xp += 15;

// class Dog {
//   constructor(name, species, size) {
//     this.name = name;
//     this.species = species;
//     this.size = size;
//   }
//   bark() {
//     return "Grrr! Grrr!";
//   }
// }

// const fang = new Dog("Fang", "boarhound", 75);
// console.log(`${fang.name} is a ${fang.species} dog measuring ${fang.size}.`);
// console.log(`Look, a cat! ${fang.name} barks: ${fang.bark()}`);

// const snowy = new Dog("Snowy", "terrier", 22);
// console.log(`${snowy.name} is a ${snowy.species} dog measuring ${snowy.size}.`);
// console.log(`Look, a cat! ${snowy.name} barks: ${snowy.bark()}`);

class BankAcc {
  constructor(owner, balance) {
    this.owner = owner;
    this.balance = 0;
  }
  credit(amount) {
    this.balance += amount;
  }
  describe() {
    return `owner: ${this.owner}, balance: ${this.balance}.`;
  }
}
const sean = new BankAcc("Sean");
const brad = new BankAcc("Brad");
const georges = new BankAcc("Georges");
console.log(sean.describe());
console.log(brad.describe());
console.log(georges.describe());

// console.log(this);
const accounts = [
  new BankAcc("Sean"),
  new BankAcc("Brad"),
  new BankAcc("Georges"),
];
accounts.forEach((acc) => {
  acc.credit(1000);
  console.log(acc.describe());
});

Or like this:

class BankAccount {
  constructor(name, balance) {
    this.name = name;
    this.balance = 0;
  }
  credit(amount) {
    this.balance += amount;
  }
  describe() {
    return `Owner: ${this.name}, balance: ${this.balance}`;
  }
}

function createAccount(name) {
  return new BankAccount(name);
}
let sean = createAccount("Sean");
let brad = createAccount("Brad");
let georges = createAccount("Georges");
console.log(sean.describe());
console.log(brad.describe());
console.log(georges.describe());

const accounts = [sean, brad, georges];
accounts.forEach((acc) => {
  acc.credit(3000);
  console.log(acc.describe());
});
